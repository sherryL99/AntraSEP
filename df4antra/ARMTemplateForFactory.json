{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "df4antra"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"BronzeToSilver_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'BronzeToSilver'"
		},
		"InputSource_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'InputSource'"
		},
		"MovieFileJson_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'MovieFileJson'"
		},
		"OutputSource_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'OutputSource'"
		},
		"RawToSilverParquet_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'RawToSilverParquet'"
		},
		"ReadBronzeMovie_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ReadBronzeMovie'"
		},
		"SinkDataset_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SinkDataset'"
		},
		"SourceDataset_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SourceDataset'"
		},
		"parquetgen2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'parquetgen2'"
		},
		"tablelist_json_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'tablelist_json'"
		},
		"BronzeToSilver_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adbnew.dfs.core.windows.net/"
		},
		"parquetgen2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adbnew.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/IncrementalCopyPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IterateSQLTables",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.tableList",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "LookupOldWaterMarkActivity",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select * from watermarktable where TableName  =  '@{item().TABLE_NAME_SOURCE}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "watermarkDataset",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "IncrementalCopyActivity",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LookupOldWaterMarkActivity",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "LookupNewWaterMarkActivity",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from @{item().TABLE_NAME_SOURCE} where @{item().WaterMark_Column} > '@{activity('LookupOldWaterMarkActivity').output.value[0].WatermarkValue}' and @{item().WaterMark_Column} <= '@{activity('LookupNewWaterMarkActivity').output.value[0].NewWatermarkvalue}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"sqlWriterStoredProcedureName": {
												"value": "@{item().StoredProcedureNameForMergeOperation}",
												"type": "Expression"
											},
											"sqlWriterTableType": {
												"value": "@{item().TableType}",
												"type": "Expression"
											},
											"storedProcedureTableTypeParameterName": {
												"value": "@{item().TABLE_NAME_SINK}",
												"type": "Expression"
											},
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SourceDataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "SinkDateset",
											"type": "DatasetReference",
											"parameters": {
												"SinkTableName": {
													"value": "@{item().TABLE_NAME_SINK}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "StoredProceduretoWriteWatermarkActivity",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "IncrementalCopyActivity",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[usp_write_watermark]",
										"storedProcedureParameters": {
											"LastEditedWhen": {
												"value": {
													"value": "\t@{activity('LookupNewWaterMarkActivity').output.value[0].NewWatermarkvalue}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"TableName": {
												"value": {
													"value": "@{activity('LookupOldWaterMarkActivity').output.value[0].TableName}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SinkDataset",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LookupNewWaterMarkActivity",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select MAX(@{item().WaterMark_Column}) as NewWatermarkvalue from @{item().TABLE_NAME_SOURCE}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SourceDataset",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"tableList": {
						"type": "array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-06-19T21:36:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/watermarkDataset')]",
				"[concat(variables('factoryId'), '/datasets/SourceDataset')]",
				"[concat(variables('factoryId'), '/datasets/SinkDateset')]",
				"[concat(variables('factoryId'), '/linkedServices/SinkDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MovieShop')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RawToBronze",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RawToBronze",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"IngestBronze": {},
									"Bronze": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "BronzeToSilver",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "RawToBronze",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BronzeToSilver",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"IngestBronze": {},
									"MovieSilver": {
										"DicName": "adf_parquet_movie"
									},
									"sink3": {
										"DirectoryName": "adf_parquet_genres"
									},
									"sink5": {
										"DirectoryName": "adf_parquet_language"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T02:13:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/RawToBronze')]",
				"[concat(variables('factoryId'), '/dataflows/BronzeToSilver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/hardcodeIncrementalCopy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupOldWatermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from watermarktable where TableName  =  'Sales.Orders'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "watermarkDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupNewWatermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select MAX(LastEditedWhen) as NewWatermarkvalue from Sales.Orders",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Orders",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupOldWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupNewWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from Sales.Orders where  LastEditedWhen> '@{activity('LookupOldWatermark').output.firstRow.WatermarkValue}' and LastEditedWhen <= '@{activity('LookupNewWatermark').output.firstRow.NewWatermarkvalue}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"sqlWriterStoredProcedureName": "[[dbo].[usp_upsert_order_table]",
								"sqlWriterTableType": "DataTypeforOrdersTable",
								"storedProcedureTableTypeParameterName": "Orders",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Orders",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ouptutOrders",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastEditedWhen": {
									"value": {
										"value": "@{activity('LookupNewWatermark').output.firstRow.NewWatermarkvalue}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@{activity('LookupOldWatermark').output.firstRow.TableName}",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/watermarkDataset')]",
				"[concat(variables('factoryId'), '/datasets/Orders')]",
				"[concat(variables('factoryId'), '/datasets/ouptutOrders')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BronzeToSilver')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BronzeToSilver",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DirectoryName": {
						"type": "string",
						"defaultValue": "adf_parquet1"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().DirectoryName",
							"type": "Expression"
						},
						"fileSystem": "newcontainer"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BronzeToSilver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerInfo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OutputSource",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "CustomerInfo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OutputSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JsonParameter')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MovieFileJson",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "newcontainer"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"movie": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"Id": {
										"type": "integer"
									},
									"Title": {
										"type": "string"
									},
									"Overview": {
										"type": "string"
									},
									"Tagline": {
										"type": "string"
									},
									"Budget": {
										"type": "number"
									},
									"Revenue": {
										"type": "number"
									},
									"ImdbUrl": {
										"type": "string"
									},
									"TmdbUrl": {
										"type": "string"
									},
									"PosterUrl": {
										"type": "string"
									},
									"BackdropUrl": {
										"type": "string"
									},
									"OriginalLanguage": {
										"type": "string"
									},
									"ReleaseDate": {
										"type": "string"
									},
									"RunTime": {
										"type": "integer"
									},
									"Price": {
										"type": "number"
									},
									"CreatedDate": {
										"type": "string"
									},
									"UpdatedDate": {
										"type": "null"
									},
									"UpdatedBy": {
										"type": "null"
									},
									"CreatedBy": {
										"type": "null"
									},
									"genres": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"name": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MovieFileJson')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MovieSilver')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ReadBronzeMovie",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DicName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().DicName",
							"type": "Expression"
						},
						"container": "newcontainer"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ReadBronzeMovie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrderLines')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "InputSource",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "OrderLineID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StockItemID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Description",
						"type": "nvarchar"
					},
					{
						"name": "PackageTypeID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnitPrice",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TaxRate",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "PickedQuantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PickingCompletedWhen",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LastEditedWhen",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "Sales",
					"table": "OrderLines"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/InputSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Orders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "InputSource",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "OrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalespersonPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PickedByPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ContactPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BackorderOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderDate",
						"type": "date"
					},
					{
						"name": "ExpectedDeliveryDate",
						"type": "date"
					},
					{
						"name": "CustomerPurchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "IsUndersupplyBackordered",
						"type": "bit"
					},
					{
						"name": "Comments",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryInstructions",
						"type": "nvarchar"
					},
					{
						"name": "InternalComments",
						"type": "nvarchar"
					},
					{
						"name": "PickingCompletedWhen",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LastEditedWhen",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "Sales",
					"table": "Orders"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/InputSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OutputCustomer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OutputSource",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerName",
						"type": "nvarchar"
					},
					{
						"name": "BillToCustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BuyingGroupID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PrimaryContactPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AlternateContactPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DeliveryMethodID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DeliveryCityID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PostalCityID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CreditLimit",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AccountOpenedDate",
						"type": "date"
					},
					{
						"name": "StandardDiscountPercentage",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "IsStatementSent",
						"type": "bit"
					},
					{
						"name": "IsOnCreditHold",
						"type": "bit"
					},
					{
						"name": "PaymentDays",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PhoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "FaxNumber",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryRun",
						"type": "nvarchar"
					},
					{
						"name": "RunPosition",
						"type": "nvarchar"
					},
					{
						"name": "WebsiteURL",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryAddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryAddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryPostalCode",
						"type": "nvarchar"
					},
					{
						"name": "PostalAddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "PostalAddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "PostalPostalCode",
						"type": "nvarchar"
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ValidFrom",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "ValidTo",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "DeliveryLocation",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Customers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OutputSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OutputPackageTypes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OutputSource",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PackageTypeID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PackageTypeName",
						"type": "nvarchar"
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ValidFrom",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "ValidTo",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "PackageTypes"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OutputSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PackageTypes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "InputSource",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerName",
						"type": "nvarchar"
					},
					{
						"name": "BillToCustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BuyingGroupID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PrimaryContactPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AlternateContactPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DeliveryMethodID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DeliveryCityID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PostalCityID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CreditLimit",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AccountOpenedDate",
						"type": "date"
					},
					{
						"name": "StandardDiscountPercentage",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "IsStatementSent",
						"type": "bit"
					},
					{
						"name": "IsOnCreditHold",
						"type": "bit"
					},
					{
						"name": "PaymentDays",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PhoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "FaxNumber",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryRun",
						"type": "nvarchar"
					},
					{
						"name": "RunPosition",
						"type": "nvarchar"
					},
					{
						"name": "WebsiteURL",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryAddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryAddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryPostalCode",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryLocation",
						"type": "geography"
					},
					{
						"name": "PostalAddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "PostalAddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "PostalPostalCode",
						"type": "nvarchar"
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ValidFrom",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "ValidTo",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "Warehouse",
					"table": "PackageTypes"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/InputSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/People')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "InputSource",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FullName",
						"type": "nvarchar"
					},
					{
						"name": "PreferredName",
						"type": "nvarchar"
					},
					{
						"name": "SearchName",
						"type": "nvarchar"
					},
					{
						"name": "IsPermittedToLogon",
						"type": "bit"
					},
					{
						"name": "LogonName",
						"type": "nvarchar"
					},
					{
						"name": "IsExternalLogonProvider",
						"type": "bit"
					},
					{
						"name": "HashedPassword",
						"type": "varbinary"
					},
					{
						"name": "IsSystemUser",
						"type": "bit"
					},
					{
						"name": "IsEmployee",
						"type": "bit"
					},
					{
						"name": "IsSalesperson",
						"type": "bit"
					},
					{
						"name": "UserPreferences",
						"type": "nvarchar"
					},
					{
						"name": "PhoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "FaxNumber",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "Photo",
						"type": "varbinary"
					},
					{
						"name": "CustomFields",
						"type": "nvarchar"
					},
					{
						"name": "OtherLanguages",
						"type": "nvarchar"
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ValidFrom",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "ValidTo",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "Application",
					"table": "People"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/InputSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesPerStockItem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OutputSource",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "SalesPerStockItem"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OutputSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkDateset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SinkDataset",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SinkTableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().SinkTableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SinkDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SourceDataset",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SourceDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StockItemPackageType')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OutputSource",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "StockItemPackageType"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OutputSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StockItems')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "InputSource",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "StockItemID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StockItemName",
						"type": "nvarchar"
					},
					{
						"name": "SupplierID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ColorID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnitPackageID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OuterPackageID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Brand",
						"type": "nvarchar"
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "LeadTimeDays",
						"type": "int",
						"precision": 10
					},
					{
						"name": "QuantityPerOuter",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IsChillerStock",
						"type": "bit"
					},
					{
						"name": "Barcode",
						"type": "nvarchar"
					},
					{
						"name": "TaxRate",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "UnitPrice",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "RecommendedRetailPrice",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TypicalWeightPerUnit",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "MarketingComments",
						"type": "nvarchar"
					},
					{
						"name": "InternalComments",
						"type": "nvarchar"
					},
					{
						"name": "Photo",
						"type": "varbinary"
					},
					{
						"name": "CustomFields",
						"type": "nvarchar"
					},
					{
						"name": "Tags",
						"type": "nvarchar"
					},
					{
						"name": "SearchDetails",
						"type": "nvarchar"
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ValidFrom",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "ValidTo",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "Warehouse",
					"table": "StockItems"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/InputSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronzeMovie')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "parquetgen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "adf_parquet",
						"fileSystem": "newcontainer"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/parquetgen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/customers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "InputSource",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerName",
						"type": "nvarchar"
					},
					{
						"name": "BillToCustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BuyingGroupID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PrimaryContactPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AlternateContactPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DeliveryMethodID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DeliveryCityID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PostalCityID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CreditLimit",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AccountOpenedDate",
						"type": "date"
					},
					{
						"name": "StandardDiscountPercentage",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "IsStatementSent",
						"type": "bit"
					},
					{
						"name": "IsOnCreditHold",
						"type": "bit"
					},
					{
						"name": "PaymentDays",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PhoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "FaxNumber",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryRun",
						"type": "nvarchar"
					},
					{
						"name": "RunPosition",
						"type": "nvarchar"
					},
					{
						"name": "WebsiteURL",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryAddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryAddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryPostalCode",
						"type": "nvarchar"
					},
					{
						"name": "PostalAddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "PostalAddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "PostalPostalCode",
						"type": "nvarchar"
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ValidFrom",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "ValidTo",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "DeliveryLocation",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "Sales",
					"table": "Customers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/InputSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/invoices')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "InputSource",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "InvoiceID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BillToCustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DeliveryMethodID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ContactPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AccountsPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalespersonPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PackedByPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InvoiceDate",
						"type": "date"
					},
					{
						"name": "CustomerPurchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "IsCreditNote",
						"type": "bit"
					},
					{
						"name": "CreditNoteReason",
						"type": "nvarchar"
					},
					{
						"name": "Comments",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryInstructions",
						"type": "nvarchar"
					},
					{
						"name": "InternalComments",
						"type": "nvarchar"
					},
					{
						"name": "TotalDryItems",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TotalChillerItems",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DeliveryRun",
						"type": "nvarchar"
					},
					{
						"name": "RunPosition",
						"type": "nvarchar"
					},
					{
						"name": "ReturnedDeliveryData",
						"type": "nvarchar"
					},
					{
						"name": "ConfirmedDeliveryTime",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "ConfirmedReceivedBy",
						"type": "nvarchar"
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LastEditedWhen",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "Sales",
					"table": "Invoices"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/InputSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movieJson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MovieFileJson",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "movie_0.json",
						"container": "newcontainer"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"movie": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"Id": {
										"type": "integer"
									},
									"Title": {
										"type": "string"
									},
									"Overview": {
										"type": "string"
									},
									"Tagline": {
										"type": "string"
									},
									"Budget": {
										"type": "number"
									},
									"Revenue": {
										"type": "number"
									},
									"ImdbUrl": {
										"type": "string"
									},
									"TmdbUrl": {
										"type": "string"
									},
									"PosterUrl": {
										"type": "string"
									},
									"BackdropUrl": {
										"type": "string"
									},
									"OriginalLanguage": {
										"type": "string"
									},
									"ReleaseDate": {
										"type": "string"
									},
									"RunTime": {
										"type": "integer"
									},
									"Price": {
										"type": "number"
									},
									"CreatedDate": {
										"type": "string"
									},
									"UpdatedDate": {
										"type": "null"
									},
									"UpdatedBy": {
										"type": "null"
									},
									"CreatedBy": {
										"type": "null"
									},
									"genres": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"name": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MovieFileJson')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ouptutOrders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OutputSource",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "OrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalespersonPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PickedByPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ContactPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BackorderOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderDate",
						"type": "date"
					},
					{
						"name": "ExpectedDeliveryDate",
						"type": "date"
					},
					{
						"name": "CustomerPurchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "IsUndersupplyBackordered",
						"type": "bit"
					},
					{
						"name": "Comments",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryInstructions",
						"type": "nvarchar"
					},
					{
						"name": "InternalComments",
						"type": "nvarchar"
					},
					{
						"name": "PickingCompletedWhen",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LastEditedWhen",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Orders"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OutputSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/outputOrderlines')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OutputSource",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "OrderLineID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StockItemID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Description",
						"type": "nvarchar"
					},
					{
						"name": "PackageTypeID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnitPrice",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TaxRate",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "PickedQuantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PickingCompletedWhen",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LastEditedWhen",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "OrderLines"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OutputSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/outputPeople')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OutputSource",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FullName",
						"type": "nvarchar"
					},
					{
						"name": "PreferredName",
						"type": "nvarchar"
					},
					{
						"name": "SearchName",
						"type": "nvarchar"
					},
					{
						"name": "IsPermittedToLogon",
						"type": "bit"
					},
					{
						"name": "LogonName",
						"type": "nvarchar"
					},
					{
						"name": "IsExternalLogonProvider",
						"type": "bit"
					},
					{
						"name": "HashedPassword",
						"type": "varbinary"
					},
					{
						"name": "IsSystemUser",
						"type": "bit"
					},
					{
						"name": "IsEmployee",
						"type": "bit"
					},
					{
						"name": "IsSalesperson",
						"type": "bit"
					},
					{
						"name": "UserPreferences",
						"type": "nvarchar"
					},
					{
						"name": "PhoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "FaxNumber",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "Photo",
						"type": "varbinary"
					},
					{
						"name": "CustomFields",
						"type": "nvarchar"
					},
					{
						"name": "OtherLanguages",
						"type": "nvarchar"
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ValidFrom",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "ValidTo",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "People"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OutputSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/outputStockItems')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OutputSource",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "StockItemID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StockItemName",
						"type": "nvarchar"
					},
					{
						"name": "SupplierID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ColorID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnitPackageID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OuterPackageID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Brand",
						"type": "nvarchar"
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "LeadTimeDays",
						"type": "int",
						"precision": 10
					},
					{
						"name": "QuantityPerOuter",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IsChillerStock",
						"type": "bit"
					},
					{
						"name": "Barcode",
						"type": "nvarchar"
					},
					{
						"name": "TaxRate",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "UnitPrice",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "RecommendedRetailPrice",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TypicalWeightPerUnit",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "MarketingComments",
						"type": "nvarchar"
					},
					{
						"name": "InternalComments",
						"type": "nvarchar"
					},
					{
						"name": "Photo",
						"type": "varbinary"
					},
					{
						"name": "CustomFields",
						"type": "nvarchar"
					},
					{
						"name": "Tags",
						"type": "nvarchar"
					},
					{
						"name": "SearchDetails",
						"type": "nvarchar"
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ValidFrom",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "ValidTo",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "StockItems"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OutputSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/outputinvoices')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OutputSource",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "InvoiceID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BillToCustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DeliveryMethodID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ContactPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AccountsPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalespersonPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PackedByPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InvoiceDate",
						"type": "date"
					},
					{
						"name": "CustomerPurchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "IsCreditNote",
						"type": "bit"
					},
					{
						"name": "CreditNoteReason",
						"type": "nvarchar"
					},
					{
						"name": "Comments",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryInstructions",
						"type": "nvarchar"
					},
					{
						"name": "InternalComments",
						"type": "nvarchar"
					},
					{
						"name": "TotalDryItems",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TotalChillerItems",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DeliveryRun",
						"type": "nvarchar"
					},
					{
						"name": "RunPosition",
						"type": "nvarchar"
					},
					{
						"name": "ReturnedDeliveryData",
						"type": "nvarchar"
					},
					{
						"name": "ConfirmedDeliveryTime",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "ConfirmedReceivedBy",
						"type": "nvarchar"
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LastEditedWhen",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Invoices"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OutputSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tablelist_json_ablob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "tablelist_json",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "WWIjson.json",
						"container": "newcontainer"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"sourceSchema": {
							"type": "string"
						},
						"souceTable": {
							"type": "string"
						},
						"sinkSchema": {
							"type": "string"
						},
						"sinkTable": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/tablelist_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/watermarkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "WatermarkValue",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "watermarktable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/wwi_ods')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OutputSource",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sinkSchema": {
						"type": "string"
					},
					"sinkTable": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().sinkSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().sinkTable",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OutputSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/wwi_oltp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "InputSource",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sourceSchema": {
						"type": "string"
					},
					"sourceTable": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().sourceSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().sourceTable",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/InputSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BronzeToSilver')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('BronzeToSilver_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('BronzeToSilver_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/InputSource')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('InputSource_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MovieFileJson')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('MovieFileJson_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OutputSource')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('OutputSource_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RawToSilverParquet')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('RawToSilverParquet_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ReadBronzeMovie')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ReadBronzeMovie_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkDataset')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('SinkDataset_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SourceDataset_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parquetgen2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('parquetgen2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('parquetgen2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tablelist_json')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('tablelist_json_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "MovieShop",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2022-06-17T00:17:00",
						"endTime": "2022-06-17T20:50:00",
						"timeZone": "Central Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/MovieShop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BronzeToSilver')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "bronzeMovie",
								"type": "DatasetReference"
							},
							"name": "IngestBronze"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MovieSilver",
								"type": "DatasetReference"
							},
							"name": "MovieSilver"
						},
						{
							"dataset": {
								"referenceName": "BronzeToSilver",
								"type": "DatasetReference"
							},
							"name": "sink3"
						},
						{
							"dataset": {
								"referenceName": "BronzeToSilver",
								"type": "DatasetReference"
							},
							"name": "sink5"
						}
					],
					"transformations": [
						{
							"name": "filterStatusNew"
						},
						{
							"name": "selectMovie"
						},
						{
							"name": "selectGenres"
						},
						{
							"name": "selectLanguage"
						},
						{
							"name": "flattenGenres"
						},
						{
							"name": "split1"
						},
						{
							"name": "LitStatusLoaded"
						},
						{
							"name": "LitStatusQuarantined"
						},
						{
							"name": "selectData"
						},
						{
							"name": "DeduplicateGenres"
						},
						{
							"name": "split2"
						},
						{
							"name": "LitStatusLoadedGenres"
						},
						{
							"name": "TransformGenres"
						},
						{
							"name": "LitStatusQuarantinedGenres"
						},
						{
							"name": "ChangeValue"
						},
						{
							"name": "selectJoinedData"
						},
						{
							"name": "LitStatusQuarantineLoadedGenres"
						},
						{
							"name": "split3"
						},
						{
							"name": "LitStatusLoadedLanguage"
						},
						{
							"name": "ChangeMovieValue"
						},
						{
							"name": "LitMovieQuarantineLoaded"
						},
						{
							"name": "ChangeValueLanguage"
						},
						{
							"name": "union1"
						},
						{
							"name": "union2"
						},
						{
							"name": "union3"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as (Id as integer, Title as string, Overview as string, Tagline as string, Budget as double, Revenue as double, ImdbUrl as string, TmdbUrl as string, PosterUrl as string, BackdropUrl as string, OriginalLanguage as string, ReleaseDate as string, RunTime as integer, Price as double, CreatedDate as string, UpdatedDate as string, UpdatedBy as string, CreatedBy as string, genres as (id as integer, name as string)[]),",
						"          datasource as string,",
						"          status as string,",
						"          ingestdate as date,",
						"          ingesttime as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> IngestBronze",
						"IngestBronze filter(status=='new') ~> filterStatusNew",
						"selectData select(mapColumn(",
						"          Id,",
						"          Title,",
						"          Overview,",
						"          Tagline,",
						"          Budget,",
						"          Revenue,",
						"          ImdbUrl,",
						"          TmdbUrl,",
						"          PosterUrl,",
						"          BackdropUrl,",
						"          OriginalLanguage,",
						"          ReleaseDate,",
						"          RunTime,",
						"          Price,",
						"          CreatedDate,",
						"          UpdatedDate,",
						"          UpdatedBy,",
						"          CreatedBy,",
						"          genres,",
						"          datasource,",
						"          status,",
						"          ingestdate,",
						"          ingesttime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMovie",
						"selectData select(mapColumn(",
						"          genres,",
						"          datasource,",
						"          status,",
						"          ingestdate,",
						"          ingesttime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectGenres",
						"selectData select(mapColumn(",
						"          OriginalLanguage,",
						"          datasource,",
						"          status,",
						"          ingestdate,",
						"          ingesttime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectLanguage",
						"selectGenres foldDown(unroll(genres),",
						"     mapColumn(",
						"          genres_id = genres.id,",
						"          genres_name = genres.name,",
						"          datasource,",
						"          status,",
						"          ingestdate,",
						"          ingesttime,",
						"          genres",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenGenres",
						"selectMovie split(and(Budget>1000000, RunTime>0),",
						"     disjoint: false) ~> split1@(MovieSilverClean, MovieSilverQuarantine)",
						"split1@MovieSilverClean derive(status = 'loaded') ~> LitStatusLoaded",
						"split1@MovieSilverQuarantine derive(status = 'quarantined') ~> LitStatusQuarantined",
						"filterStatusNew select(mapColumn(",
						"          movie,",
						"          Id = movie.Id,",
						"          Title = movie.Title,",
						"          datasource,",
						"          status,",
						"          ingestdate,",
						"          ingesttime,",
						"          Overview = movie.Overview,",
						"          Tagline = movie.Tagline,",
						"          Budget = movie.Budget,",
						"          Revenue = movie.Revenue,",
						"          ImdbUrl = movie.ImdbUrl,",
						"          TmdbUrl = movie.TmdbUrl,",
						"          PosterUrl = movie.PosterUrl,",
						"          BackdropUrl = movie.BackdropUrl,",
						"          OriginalLanguage = movie.OriginalLanguage,",
						"          ReleaseDate = movie.ReleaseDate,",
						"          RunTime = movie.RunTime,",
						"          Price = movie.Price,",
						"          CreatedDate = movie.CreatedDate,",
						"          UpdatedDate = movie.UpdatedDate,",
						"          UpdatedBy = movie.UpdatedBy,",
						"          CreatedBy = movie.CreatedBy,",
						"          genres = movie.genres",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectData",
						"flattenGenres aggregate(groupBy(genres_id),",
						"     genres_name = first(genres_name)) ~> DeduplicateGenres",
						"flattenGenres split(not(isNull(genres_name)),",
						"     disjoint: false) ~> split2@(GenresSilverClean, GenresSilverQurantine)",
						"TransformGenres derive(status = 'loaded') ~> LitStatusLoadedGenres",
						"split2@GenresSilverClean select(mapColumn(",
						"          genres,",
						"          datasource,",
						"          status,",
						"          ingestdate,",
						"          ingesttime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TransformGenres",
						"split2@GenresSilverQurantine derive(status = 'quarantined') ~> LitStatusQuarantinedGenres",
						"LitStatusQuarantinedGenres, DeduplicateGenres join(split2@GenresSilverQurantine@genres_id == DeduplicateGenres@genres_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> ChangeValue",
						"ChangeValue select(mapColumn(",
						"          genres,",
						"          genres_id = DeduplicateGenres@genres_id,",
						"          genres_name = DeduplicateGenres@genres_name,",
						"          datasource,",
						"          status,",
						"          ingestdate,",
						"          ingesttime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectJoinedData",
						"selectJoinedData derive(status = 'loaded') ~> LitStatusQuarantineLoadedGenres",
						"selectLanguage split(not(isNull(OriginalLanguage)),",
						"     disjoint: false) ~> split3@(LanguageSilverClean, LanguageSilverQuarantine)",
						"split3@LanguageSilverClean derive(status = 'loaded') ~> LitStatusLoadedLanguage",
						"LitStatusQuarantined derive(RunTime = abs(RunTime),",
						"          Budget = 1000000) ~> ChangeMovieValue",
						"ChangeMovieValue derive(status = 'loaded') ~> LitMovieQuarantineLoaded",
						"split3@LanguageSilverQuarantine derive(OriginalLanguage = 'en') ~> ChangeValueLanguage",
						"LitStatusLoadedLanguage, ChangeValueLanguage union(byName: true)~> union1",
						"select1, LitStatusQuarantineLoadedGenres union(byName: true)~> union2",
						"LitStatusLoaded, LitMovieQuarantineLoaded union(byName: true)~> union3",
						"LitStatusLoadedGenres select(mapColumn(",
						"          genres,",
						"          id = genres.id,",
						"          name = genres.name,",
						"          datasource,",
						"          status,",
						"          ingestdate,",
						"          ingesttime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"union2 select(mapColumn(",
						"          genres,",
						"          id,",
						"          name,",
						"          datasource,",
						"          status,",
						"          ingestdate,",
						"          ingesttime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"union3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> MovieSilver",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink3",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink5"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/bronzeMovie')]",
				"[concat(variables('factoryId'), '/datasets/MovieSilver')]",
				"[concat(variables('factoryId'), '/datasets/BronzeToSilver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RawToBronze')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "movieJson",
								"type": "DatasetReference"
							},
							"name": "IngestBronze"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "bronzeMovie",
								"type": "DatasetReference"
							},
							"name": "Bronze"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as (Id as integer, Title as string, Overview as string, Tagline as string, Budget as double, Revenue as double, ImdbUrl as string, TmdbUrl as string, PosterUrl as string, BackdropUrl as string, OriginalLanguage as string, ReleaseDate as string, RunTime as integer, Price as double, CreatedDate as string, UpdatedDate as string, UpdatedBy as string, CreatedBy as string, genres as (id as integer, name as string)[])[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'singleDocument') ~> IngestBronze",
						"IngestBronze foldDown(unroll(movie),",
						"     mapColumn(",
						"          movie",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(datasource = 'movie_0.json',",
						"          status = 'new',",
						"          ingestdate = currentDate(),",
						"          ingesttime = currentTimestamp()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Bronze"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/movieJson')]",
				"[concat(variables('factoryId'), '/datasets/bronzeMovie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WWI')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ouptutOrders",
								"type": "DatasetReference"
							},
							"name": "OrdersODS"
						},
						{
							"dataset": {
								"referenceName": "outputOrderlines",
								"type": "DatasetReference"
							},
							"name": "OrderlinesODS"
						},
						{
							"dataset": {
								"referenceName": "StockItems",
								"type": "DatasetReference"
							},
							"name": "StockItems"
						},
						{
							"dataset": {
								"referenceName": "outputPeople",
								"type": "DatasetReference"
							},
							"name": "People"
						},
						{
							"dataset": {
								"referenceName": "OutputPackageTypes",
								"type": "DatasetReference"
							},
							"name": "PackageTypes"
						},
						{
							"dataset": {
								"referenceName": "outputinvoices",
								"type": "DatasetReference"
							},
							"name": "Invoices"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SalesPerStockItem",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "CustomerInfo",
								"type": "DatasetReference"
							},
							"name": "sink3"
						},
						{
							"dataset": {
								"referenceName": "StockItemPackageType",
								"type": "DatasetReference"
							},
							"name": "sink4"
						}
					],
					"transformations": [
						{
							"name": "CountOrdersPerCustomer"
						},
						{
							"name": "select1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "select2"
						},
						{
							"name": "join1"
						},
						{
							"name": "SalesPerStockItem"
						},
						{
							"name": "rank1"
						},
						{
							"name": "join2"
						},
						{
							"name": "PeopleName"
						},
						{
							"name": "select3"
						},
						{
							"name": "join3"
						},
						{
							"name": "select4"
						},
						{
							"name": "select5"
						},
						{
							"name": "join4"
						},
						{
							"name": "select6"
						},
						{
							"name": "select7"
						},
						{
							"name": "select8"
						},
						{
							"name": "join5"
						},
						{
							"name": "join6"
						},
						{
							"name": "select9"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderID as integer,",
						"          CustomerID as integer,",
						"          SalespersonPersonID as integer,",
						"          PickedByPersonID as integer,",
						"          ContactPersonID as integer,",
						"          BackorderOrderID as integer,",
						"          OrderDate as date,",
						"          ExpectedDeliveryDate as date,",
						"          CustomerPurchaseOrderNumber as string,",
						"          IsUndersupplyBackordered as boolean,",
						"          Comments as string,",
						"          DeliveryInstructions as string,",
						"          InternalComments as string,",
						"          PickingCompletedWhen as timestamp,",
						"          LastEditedBy as integer,",
						"          LastEditedWhen as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: false,",
						"     waterMarkColumn: 'logDT',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> OrdersODS",
						"source(output(",
						"          OrderLineID as integer,",
						"          OrderID as integer,",
						"          StockItemID as integer,",
						"          Description as string,",
						"          PackageTypeID as integer,",
						"          Quantity as integer,",
						"          UnitPrice as decimal(18,2),",
						"          TaxRate as decimal(18,3),",
						"          PickedQuantity as integer,",
						"          PickingCompletedWhen as timestamp,",
						"          LastEditedBy as integer,",
						"          LastEditedWhen as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     waterMarkColumn: 'logDT',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> OrderlinesODS",
						"source(output(",
						"          StockItemID as integer,",
						"          StockItemName as string,",
						"          SupplierID as integer,",
						"          ColorID as integer,",
						"          UnitPackageID as integer,",
						"          OuterPackageID as integer,",
						"          Brand as string,",
						"          Size as string,",
						"          LeadTimeDays as integer,",
						"          QuantityPerOuter as integer,",
						"          IsChillerStock as boolean,",
						"          Barcode as string,",
						"          TaxRate as decimal(18,3),",
						"          UnitPrice as decimal(18,2),",
						"          RecommendedRetailPrice as decimal(18,2),",
						"          TypicalWeightPerUnit as decimal(18,3),",
						"          MarketingComments as string,",
						"          InternalComments as string,",
						"          Photo as binary,",
						"          CustomFields as string,",
						"          Tags as string,",
						"          SearchDetails as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     waterMarkColumn: 'logDT',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StockItems",
						"source(output(",
						"          PersonID as integer,",
						"          FullName as string,",
						"          PreferredName as string,",
						"          SearchName as string,",
						"          IsPermittedToLogon as boolean,",
						"          LogonName as string,",
						"          IsExternalLogonProvider as boolean,",
						"          HashedPassword as binary,",
						"          IsSystemUser as boolean,",
						"          IsEmployee as boolean,",
						"          IsSalesperson as boolean,",
						"          UserPreferences as string,",
						"          PhoneNumber as string,",
						"          FaxNumber as string,",
						"          EmailAddress as string,",
						"          Photo as binary,",
						"          CustomFields as string,",
						"          OtherLanguages as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> People",
						"source(output(",
						"          PackageTypeID as integer,",
						"          PackageTypeName as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> PackageTypes",
						"source(output(",
						"          InvoiceID as integer,",
						"          CustomerID as integer,",
						"          BillToCustomerID as integer,",
						"          OrderID as integer,",
						"          DeliveryMethodID as integer,",
						"          ContactPersonID as integer,",
						"          AccountsPersonID as integer,",
						"          SalespersonPersonID as integer,",
						"          PackedByPersonID as integer,",
						"          InvoiceDate as date,",
						"          CustomerPurchaseOrderNumber as string,",
						"          IsCreditNote as boolean,",
						"          CreditNoteReason as string,",
						"          Comments as string,",
						"          DeliveryInstructions as string,",
						"          InternalComments as string,",
						"          TotalDryItems as integer,",
						"          TotalChillerItems as integer,",
						"          DeliveryRun as string,",
						"          RunPosition as string,",
						"          ReturnedDeliveryData as string,",
						"          ConfirmedDeliveryTime as timestamp,",
						"          ConfirmedReceivedBy as string,",
						"          LastEditedBy as integer,",
						"          LastEditedWhen as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Invoices",
						"select1 aggregate(groupBy(CustomerID),",
						"     NumOfOrderPerCustomer = count(OrderID)) ~> CountOrdersPerCustomer",
						"OrdersODS select(mapColumn(",
						"          OrderID,",
						"          CustomerID,",
						"          SalespersonPersonID,",
						"          PickedByPersonID,",
						"          ContactPersonID,",
						"          BackorderOrderID,",
						"          OrderDate,",
						"          ExpectedDeliveryDate,",
						"          CustomerPurchaseOrderNumber,",
						"          IsUndersupplyBackordered,",
						"          Comments,",
						"          DeliveryInstructions,",
						"          InternalComments,",
						"          PickingCompletedWhen,",
						"          LastEditedBy,",
						"          LastEditedWhen",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"CountOrdersPerCustomer sort(desc(NumOfOrderPerCustomer, true)) ~> sort1",
						"OrderlinesODS select(mapColumn(",
						"          OrderLineID,",
						"          OrderID,",
						"          StockItemID,",
						"          Description,",
						"          PackageTypeID,",
						"          Quantity,",
						"          UnitPrice,",
						"          TaxRate,",
						"          PickedQuantity,",
						"          PickingCompletedWhen,",
						"          LastEditedBy,",
						"          LastEditedWhen",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2, select4 join(select2@StockItemID == select4@StockItemID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"select5 aggregate(groupBy(StockItemID),",
						"     SalesPerStockItem = sum(Quantity*UnitPrice)) ~> SalesPerStockItem",
						"SalesPerStockItem rank(desc(SalesPerStockItem, true),",
						"     caseInsensitive: true,",
						"     output(SalesRank as long),",
						"     dense: true) ~> rank1",
						"sort1, PeopleName join(CustomerID == PersonID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"People select(mapColumn(",
						"          PersonID,",
						"          FullName,",
						"          PhoneNumber,",
						"          EmailAddress",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> PeopleName",
						"join2 select(mapColumn(",
						"          CustomerID,",
						"          NumOfOrderPerCustomer,",
						"          FullName,",
						"          PhoneNumber,",
						"          EmailAddress",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"StockItems, PackageTypes join(UnitPackageID == PackageTypeID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3 select(mapColumn(",
						"          StockItemID,",
						"          StockItemName,",
						"          PackageTypeName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"join1 select(mapColumn(",
						"          OrderID,",
						"          StockItemID = select2@StockItemID,",
						"          PackageTypeID,",
						"          Quantity,",
						"          UnitPrice,",
						"          StockItemID = select4@StockItemID,",
						"          StockItemName,",
						"          PackageTypeName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"select6, select4 join(select6@StockItemID == select4@StockItemID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"rank1 select(mapColumn(",
						"          StockItemID,",
						"          SalesPerStockItem,",
						"          SalesRank",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"join4 select(mapColumn(",
						"          StockItemID = select4@StockItemID,",
						"          StockItemName,",
						"          SalesPerStockItem,",
						"          SalesRank,",
						"          PackageTypeName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"Invoices select(mapColumn(",
						"          InvoiceID,",
						"          CustomerID,",
						"          OrderID,",
						"          InvoiceDate,",
						"          DeliveryInstructions",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"select8, PeopleName join(CustomerID == PersonID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join5",
						"join5, select3 join(select8@CustomerID == select3@CustomerID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join6",
						"join6 select(mapColumn(",
						"          InvoiceID,",
						"          OrderID,",
						"          InvoiceDate,",
						"          PersonID,",
						"          FullName = PeopleName@FullName,",
						"          PhoneNumber = PeopleName@PhoneNumber,",
						"          EmailAddress = PeopleName@EmailAddress,",
						"          DeliveryInstructions",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"select7 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink2",
						"select3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink3",
						"select4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink4"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ouptutOrders')]",
				"[concat(variables('factoryId'), '/datasets/outputOrderlines')]",
				"[concat(variables('factoryId'), '/datasets/StockItems')]",
				"[concat(variables('factoryId'), '/datasets/outputPeople')]",
				"[concat(variables('factoryId'), '/datasets/OutputPackageTypes')]",
				"[concat(variables('factoryId'), '/datasets/outputinvoices')]",
				"[concat(variables('factoryId'), '/datasets/SalesPerStockItem')]",
				"[concat(variables('factoryId'), '/datasets/CustomerInfo')]",
				"[concat(variables('factoryId'), '/datasets/StockItemPackageType')]"
			]
		}
	]
}